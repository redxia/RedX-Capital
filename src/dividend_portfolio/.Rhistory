cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$GPIQ > 0 & data$QQQ > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$GPIQ < 0 & data$QQQ < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
# tickers = c('XLG','SPY','XLG')
tickers = c('XLG','SPY','XLG')
# date = Sys.Date() - 365 #
date = Sys.Date() - (365*2) #
# date = Sys.Date() - 183 #
# date = Sys.Date() - 88 #
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
# getSymbols('DMO3MO', src='FRED', from=date, to = Sys.Date()+1)
#rf = as.numeric(DMO3MO[nrow(DMO3MO),]) / 100
rf=0
XLG_rets = na.omit(periodReturn(XLG$XLG.Adjusted, period = 'daily'))
SPY_rets = na.omit(periodReturn(SPY$SPY.Adjusted, period = 'daily'))
XLG_rets = na.omit(periodReturn(XLG$XLG.Adjusted, period = 'daily'))
# data = data.frame(XLG=XLG_rets,SPY=SPY_rets)
data = data.frame(XLG=XLG_rets,SPY=SPY_rets,XLG=XLG_rets)
colnames(data) = c("XLG",'SPY')
colnames(data) = c("XLG",'SPY','XLG')
data = data[order(data$SPY),]
# data$pos_neg = data$SPY < -.005
#data$yhat = predict(polyReg, data)
plot(data$SPY-rf, data$XLG-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$SPY,data$yhat, col='red')
linTrReg <- lm(I(XLG-rf)~I(SPY-rf), data = data)
# data$piecewise <- ifelse (data$pos_neg, abs(data$SPY)^1.5, data$SPY)
# polyReg <- lm(XLG ~SPY * pos_neg, data = data)
polyReg <- lm(XLG ~SPY + XLG, data = data)
# polyReg <- lm(XLG ~ I(abs(SPY)^3/2), data = data)
# polyReg <- lm(XLG~I(SPY^2), data = data)
#polyReg <- lm(T.Adjusted~exp(-SPY * 16), data = data)
abline(linTrReg, col='red')
# lines(x=data$SPY, y=predict(polyReg), col='darkred', pch=22,lwd=2)
points(x=mean(data$SPY), y=mean(data$XLG), col='darkred', pch=22,lwd=4)
summary(linTrReg)
#summary(polyReg)
stock_cor = cor(data$XLG,data$SPY)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * 252 * 100,2)) #annualized
# cat(paste(tickers[1],'Mean: '), round(mean(XLG_rets$XLG) * length(XLG_rets$XLG) * 100,2))
# cat(paste(tickers[1],'Volatiltiy:'), round(sd(XLG_rets$XLG) * round(sqrt(length(XLG_rets$XLG))) * 100,2))
# cat(paste(tickers[2],'Mean: '), round(mean(SPY_rets$SPY) * length(SPY_rets$SPY) * 100,2))
# cat(paste(tickers[2],'Volatiltiy:'), round(sd(SPY_rets$SPY) * round(sqrt(length(SPY_rets$SPY))) * 100),2)
cat(paste(tickers[1],'Mean: '), round(mean(data$XLG) * 252 * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(data$XLG) * sqrt(252) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(data$SPY) * 252 * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(data$SPY) * sqrt(252) * 100),2)
prob_error = (nrow(data[data$XLG < 0 & data$SPY > 0,]) +
nrow(data[data$XLG > 0 & data$SPY < 0,])
) / nrow(data)
cat('Probability of being offSPYgonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$XLG > 0 & data$SPY < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$XLG < 0 & data$SPY > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$XLG > 0 & data$SPY > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$XLG < 0 & data$SPY < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
# tickers = c('XLG','QQQ','XLG')
tickers = c('XLG','QQQ','XLG')
# date = Sys.Date() - 365 #
date = Sys.Date() - (365*2) #
# date = Sys.Date() - 183 #
# date = Sys.Date() - 88 #
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
# getSymbols('DMO3MO', src='FRED', from=date, to = Sys.Date()+1)
#rf = as.numeric(DMO3MO[nrow(DMO3MO),]) / 100
rf=0
XLG_rets = na.omit(periodReturn(XLG$XLG.Adjusted, period = 'daily'))
QQQ_rets = na.omit(periodReturn(QQQ$QQQ.Adjusted, period = 'daily'))
XLG_rets = na.omit(periodReturn(XLG$XLG.Adjusted, period = 'daily'))
# data = data.frame(XLG=XLG_rets,QQQ=QQQ_rets)
data = data.frame(XLG=XLG_rets,QQQ=QQQ_rets,XLG=XLG_rets)
colnames(data) = c("XLG",'QQQ')
colnames(data) = c("XLG",'QQQ','XLG')
data = data[order(data$QQQ),]
# data$pos_neg = data$QQQ < -.005
#data$yhat = predict(polyReg, data)
plot(data$QQQ-rf, data$XLG-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$QQQ,data$yhat, col='red')
linTrReg <- lm(I(XLG-rf)~I(QQQ-rf), data = data)
# data$piecewise <- ifelse (data$pos_neg, abs(data$QQQ)^1.5, data$QQQ)
# polyReg <- lm(XLG ~QQQ * pos_neg, data = data)
polyReg <- lm(XLG ~QQQ + XLG, data = data)
# polyReg <- lm(XLG ~ I(abs(QQQ)^3/2), data = data)
# polyReg <- lm(XLG~I(QQQ^2), data = data)
#polyReg <- lm(T.Adjusted~exp(-QQQ * 16), data = data)
abline(linTrReg, col='red')
# lines(x=data$QQQ, y=predict(polyReg), col='darkred', pch=22,lwd=2)
points(x=mean(data$QQQ), y=mean(data$XLG), col='darkred', pch=22,lwd=4)
summary(linTrReg)
#summary(polyReg)
stock_cor = cor(data$XLG,data$QQQ)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * 252 * 100,2)) #annualized
# cat(paste(tickers[1],'Mean: '), round(mean(XLG_rets$XLG) * length(XLG_rets$XLG) * 100,2))
# cat(paste(tickers[1],'Volatiltiy:'), round(sd(XLG_rets$XLG) * round(sqrt(length(XLG_rets$XLG))) * 100,2))
# cat(paste(tickers[2],'Mean: '), round(mean(QQQ_rets$QQQ) * length(QQQ_rets$QQQ) * 100,2))
# cat(paste(tickers[2],'Volatiltiy:'), round(sd(QQQ_rets$QQQ) * round(sqrt(length(QQQ_rets$QQQ))) * 100),2)
cat(paste(tickers[1],'Mean: '), round(mean(data$XLG) * 252 * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(data$XLG) * sqrt(252) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(data$QQQ) * 252 * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(data$QQQ) * sqrt(252) * 100),2)
prob_error = (nrow(data[data$XLG < 0 & data$QQQ > 0,]) +
nrow(data[data$XLG > 0 & data$QQQ < 0,])
) / nrow(data)
cat('Probability of being offQQQgonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$XLG > 0 & data$QQQ < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$XLG < 0 & data$QQQ > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$XLG > 0 & data$QQQ > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$XLG < 0 & data$QQQ < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
# tickers = c('BITO','TQQQ','BITO')
tickers = c('BITO','TQQQ','BITO')
# date = Sys.Date() - 365 #
date = Sys.Date() - (365*2) #
# date = Sys.Date() - 183 #
# date = Sys.Date() - 88 #
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
# getSymbols('DMO3MO', src='FRED', from=date, to = Sys.Date()+1)
#rf = as.numeric(DMO3MO[nrow(DMO3MO),]) / 100
rf=0
BITO_rets = na.omit(periodReturn(BITO$BITO.Adjusted, period = 'daily'))
TQQQ_rets = na.omit(periodReturn(TQQQ$TQQQ.Adjusted, period = 'daily'))
BITO_rets = na.omit(periodReturn(BITO$BITO.Adjusted, period = 'daily'))
# data = data.frame(BITO=BITO_rets,TQQQ=TQQQ_rets)
data = data.frame(BITO=BITO_rets,TQQQ=TQQQ_rets,BITO=BITO_rets)
colnames(data) = c("BITO",'TQQQ')
colnames(data) = c("BITO",'TQQQ','BITO')
data = data[order(data$TQQQ),]
# data$pos_neg = data$TQQQ < -.005
#data$yhat = predict(polyReg, data)
plot(data$TQQQ-rf, data$BITO-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$TQQQ,data$yhat, col='red')
linTrReg <- lm(I(BITO-rf)~I(TQQQ-rf), data = data)
# data$piecewise <- ifelse (data$pos_neg, abs(data$TQQQ)^1.5, data$TQQQ)
# polyReg <- lm(BITO ~TQQQ * pos_neg, data = data)
polyReg <- lm(BITO ~TQQQ + BITO, data = data)
# polyReg <- lm(BITO ~ I(abs(TQQQ)^3/2), data = data)
# polyReg <- lm(BITO~I(TQQQ^2), data = data)
#polyReg <- lm(T.Adjusted~exp(-TQQQ * 16), data = data)
abline(linTrReg, col='red')
# lines(x=data$TQQQ, y=predict(polyReg), col='darkred', pch=22,lwd=2)
points(x=mean(data$TQQQ), y=mean(data$BITO), col='darkred', pch=22,lwd=4)
summary(linTrReg)
#summary(polyReg)
stock_cor = cor(data$BITO,data$TQQQ)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * 252 * 100,2)) #annualized
# cat(paste(tickers[1],'Mean: '), round(mean(BITO_rets$BITO) * length(BITO_rets$BITO) * 100,2))
# cat(paste(tickers[1],'Volatiltiy:'), round(sd(BITO_rets$BITO) * round(sqrt(length(BITO_rets$BITO))) * 100,2))
# cat(paste(tickers[2],'Mean: '), round(mean(TQQQ_rets$TQQQ) * length(TQQQ_rets$TQQQ) * 100,2))
# cat(paste(tickers[2],'Volatiltiy:'), round(sd(TQQQ_rets$TQQQ) * round(sqrt(length(TQQQ_rets$TQQQ))) * 100),2)
cat(paste(tickers[1],'Mean: '), round(mean(data$BITO) * 252 * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(data$BITO) * sqrt(252) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(data$TQQQ) * 252 * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(data$TQQQ) * sqrt(252) * 100),2)
prob_error = (nrow(data[data$BITO < 0 & data$TQQQ > 0,]) +
nrow(data[data$BITO > 0 & data$TQQQ < 0,])
) / nrow(data)
cat('Probability of being offTQQQgonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$BITO > 0 & data$TQQQ < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$BITO < 0 & data$TQQQ > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$BITO > 0 & data$TQQQ > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$BITO < 0 & data$TQQQ < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
# tickers = c('QDTE','XDTE','QDTE')
tickers = c('QDTE','XDTE','QDTE')
# date = Sys.Date() - 365 #
date = Sys.Date() - (365*0.98) #
# date = Sys.Date() - 183 #
# date = Sys.Date() - 88 #
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
# getSymbols('DMO3MO', src='FRED', from=date, to = Sys.Date()+1)
#rf = as.numeric(DMO3MO[nrow(DMO3MO),]) / 100
rf=0
QDTE_rets = na.omit(periodReturn(QDTE$QDTE.Adjusted, period = 'daily'))
XDTE_rets = na.omit(periodReturn(XDTE$XDTE.Adjusted, period = 'daily'))
QDTE_rets = na.omit(periodReturn(QDTE$QDTE.Adjusted, period = 'daily'))
# data = data.frame(QDTE=QDTE_rets,XDTE=XDTE_rets)
data = data.frame(QDTE=QDTE_rets,XDTE=XDTE_rets,QDTE=QDTE_rets)
colnames(data) = c("QDTE",'XDTE')
colnames(data) = c("QDTE",'XDTE','QDTE')
data = data[order(data$XDTE),]
# data$pos_neg = data$XDTE < -.005
#data$yhat = predict(polyReg, data)
plot(data$XDTE-rf, data$QDTE-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$XDTE,data$yhat, col='red')
linTrReg <- lm(I(QDTE-rf)~I(XDTE-rf), data = data)
# data$piecewise <- ifelse (data$pos_neg, abs(data$XDTE)^1.5, data$XDTE)
# polyReg <- lm(QDTE ~XDTE * pos_neg, data = data)
polyReg <- lm(QDTE ~XDTE + QDTE, data = data)
# polyReg <- lm(QDTE ~ I(abs(XDTE)^3/2), data = data)
# polyReg <- lm(QDTE~I(XDTE^2), data = data)
#polyReg <- lm(T.Adjusted~exp(-XDTE * 16), data = data)
abline(linTrReg, col='red')
# lines(x=data$XDTE, y=predict(polyReg), col='darkred', pch=22,lwd=2)
points(x=mean(data$XDTE), y=mean(data$QDTE), col='darkred', pch=22,lwd=4)
summary(linTrReg)
#summary(polyReg)
stock_cor = cor(data$QDTE,data$XDTE)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * 252 * 100,2)) #annualized
# cat(paste(tickers[1],'Mean: '), round(mean(QDTE_rets$QDTE) * length(QDTE_rets$QDTE) * 100,2))
# cat(paste(tickers[1],'Volatiltiy:'), round(sd(QDTE_rets$QDTE) * round(sqrt(length(QDTE_rets$QDTE))) * 100,2))
# cat(paste(tickers[2],'Mean: '), round(mean(XDTE_rets$XDTE) * length(XDTE_rets$XDTE) * 100,2))
# cat(paste(tickers[2],'Volatiltiy:'), round(sd(XDTE_rets$XDTE) * round(sqrt(length(XDTE_rets$XDTE))) * 100),2)
cat(paste(tickers[1],'Mean: '), round(mean(data$QDTE) * 252 * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(data$QDTE) * sqrt(252) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(data$XDTE) * 252 * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(data$XDTE) * sqrt(252) * 100),2)
prob_error = (nrow(data[data$QDTE < 0 & data$XDTE > 0,]) +
nrow(data[data$QDTE > 0 & data$XDTE < 0,])
) / nrow(data)
cat('Probability of being offXDTEgonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$QDTE > 0 & data$XDTE < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$QDTE < 0 & data$XDTE > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$QDTE > 0 & data$XDTE > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$QDTE < 0 & data$XDTE < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
# tickers = c('QDTE','XDTE','QDTE')
tickers = c('QDTE','XDTE','QDTE')
# date = Sys.Date() - 365 #
date = Sys.Date() - (365*1) #
# date = Sys.Date() - 183 #
# date = Sys.Date() - 88 #
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
# getSymbols('DMO3MO', src='FRED', from=date, to = Sys.Date()+1)
#rf = as.numeric(DMO3MO[nrow(DMO3MO),]) / 100
rf=0
QDTE_rets = na.omit(periodReturn(QDTE$QDTE.Adjusted, period = 'daily'))
XDTE_rets = na.omit(periodReturn(XDTE$XDTE.Adjusted, period = 'daily'))
QDTE_rets = na.omit(periodReturn(QDTE$QDTE.Adjusted, period = 'daily'))
# data = data.frame(QDTE=QDTE_rets,XDTE=XDTE_rets)
data = data.frame(QDTE=QDTE_rets,XDTE=XDTE_rets,QDTE=QDTE_rets)
colnames(data) = c("QDTE",'XDTE')
colnames(data) = c("QDTE",'XDTE','QDTE')
data = data[order(data$XDTE),]
# data$pos_neg = data$XDTE < -.005
#data$yhat = predict(polyReg, data)
plot(data$XDTE-rf, data$QDTE-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$XDTE,data$yhat, col='red')
linTrReg <- lm(I(QDTE-rf)~I(XDTE-rf), data = data)
# data$piecewise <- ifelse (data$pos_neg, abs(data$XDTE)^1.5, data$XDTE)
# polyReg <- lm(QDTE ~XDTE * pos_neg, data = data)
polyReg <- lm(QDTE ~XDTE + QDTE, data = data)
# polyReg <- lm(QDTE ~ I(abs(XDTE)^3/2), data = data)
# polyReg <- lm(QDTE~I(XDTE^2), data = data)
#polyReg <- lm(T.Adjusted~exp(-XDTE * 16), data = data)
abline(linTrReg, col='red')
# lines(x=data$XDTE, y=predict(polyReg), col='darkred', pch=22,lwd=2)
points(x=mean(data$XDTE), y=mean(data$QDTE), col='darkred', pch=22,lwd=4)
summary(linTrReg)
#summary(polyReg)
stock_cor = cor(data$QDTE,data$XDTE)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * 252 * 100,2)) #annualized
# cat(paste(tickers[1],'Mean: '), round(mean(QDTE_rets$QDTE) * length(QDTE_rets$QDTE) * 100,2))
# cat(paste(tickers[1],'Volatiltiy:'), round(sd(QDTE_rets$QDTE) * round(sqrt(length(QDTE_rets$QDTE))) * 100,2))
# cat(paste(tickers[2],'Mean: '), round(mean(XDTE_rets$XDTE) * length(XDTE_rets$XDTE) * 100,2))
# cat(paste(tickers[2],'Volatiltiy:'), round(sd(XDTE_rets$XDTE) * round(sqrt(length(XDTE_rets$XDTE))) * 100),2)
cat(paste(tickers[1],'Mean: '), round(mean(data$QDTE) * 252 * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(data$QDTE) * sqrt(252) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(data$XDTE) * 252 * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(data$XDTE) * sqrt(252) * 100),2)
prob_error = (nrow(data[data$QDTE < 0 & data$XDTE > 0,]) +
nrow(data[data$QDTE > 0 & data$XDTE < 0,])
) / nrow(data)
cat('Probability of being offXDTEgonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$QDTE > 0 & data$XDTE < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$QDTE < 0 & data$XDTE > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$QDTE > 0 & data$XDTE > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$QDTE < 0 & data$XDTE < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
# tickers = c('GPIX','XDTE','GPIX')
tickers = c('GPIX','XDTE','GPIX')
# date = Sys.Date() - 365 #
date = Sys.Date() - (365*1) #
# date = Sys.Date() - 183 #
# date = Sys.Date() - 88 #
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
# getSymbols('DMO3MO', src='FRED', from=date, to = Sys.Date()+1)
#rf = as.numeric(DMO3MO[nrow(DMO3MO),]) / 100
rf=0
GPIX_rets = na.omit(periodReturn(GPIX$GPIX.Adjusted, period = 'daily'))
XDTE_rets = na.omit(periodReturn(XDTE$XDTE.Adjusted, period = 'daily'))
GPIX_rets = na.omit(periodReturn(GPIX$GPIX.Adjusted, period = 'daily'))
# data = data.frame(GPIX=GPIX_rets,XDTE=XDTE_rets)
data = data.frame(GPIX=GPIX_rets,XDTE=XDTE_rets,GPIX=GPIX_rets)
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
# tickers = c('GPIX','XDTE','GPIX')
tickers = c('GPIX','XDTE','GPIX')
# date = Sys.Date() - 365 #
date = Sys.Date() - (365*.98) #
# date = Sys.Date() - 183 #
# date = Sys.Date() - 88 #
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
# getSymbols('DMO3MO', src='FRED', from=date, to = Sys.Date()+1)
#rf = as.numeric(DMO3MO[nrow(DMO3MO),]) / 100
rf=0
GPIX_rets = na.omit(periodReturn(GPIX$GPIX.Adjusted, period = 'daily'))
XDTE_rets = na.omit(periodReturn(XDTE$XDTE.Adjusted, period = 'daily'))
GPIX_rets = na.omit(periodReturn(GPIX$GPIX.Adjusted, period = 'daily'))
# data = data.frame(GPIX=GPIX_rets,XDTE=XDTE_rets)
data = data.frame(GPIX=GPIX_rets,XDTE=XDTE_rets,GPIX=GPIX_rets)
colnames(data) = c("GPIX",'XDTE')
colnames(data) = c("GPIX",'XDTE','GPIX')
data = data[order(data$XDTE),]
# data$pos_neg = data$XDTE < -.005
#data$yhat = predict(polyReg, data)
plot(data$XDTE-rf, data$GPIX-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$XDTE,data$yhat, col='red')
linTrReg <- lm(I(GPIX-rf)~I(XDTE-rf), data = data)
# data$piecewise <- ifelse (data$pos_neg, abs(data$XDTE)^1.5, data$XDTE)
# polyReg <- lm(GPIX ~XDTE * pos_neg, data = data)
polyReg <- lm(GPIX ~XDTE + GPIX, data = data)
# polyReg <- lm(GPIX ~ I(abs(XDTE)^3/2), data = data)
# polyReg <- lm(GPIX~I(XDTE^2), data = data)
#polyReg <- lm(T.Adjusted~exp(-XDTE * 16), data = data)
abline(linTrReg, col='red')
# lines(x=data$XDTE, y=predict(polyReg), col='darkred', pch=22,lwd=2)
points(x=mean(data$XDTE), y=mean(data$GPIX), col='darkred', pch=22,lwd=4)
summary(linTrReg)
#summary(polyReg)
stock_cor = cor(data$GPIX,data$XDTE)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * 252 * 100,2)) #annualized
# cat(paste(tickers[1],'Mean: '), round(mean(GPIX_rets$GPIX) * length(GPIX_rets$GPIX) * 100,2))
# cat(paste(tickers[1],'Volatiltiy:'), round(sd(GPIX_rets$GPIX) * round(sqrt(length(GPIX_rets$GPIX))) * 100,2))
# cat(paste(tickers[2],'Mean: '), round(mean(XDTE_rets$XDTE) * length(XDTE_rets$XDTE) * 100,2))
# cat(paste(tickers[2],'Volatiltiy:'), round(sd(XDTE_rets$XDTE) * round(sqrt(length(XDTE_rets$XDTE))) * 100),2)
cat(paste(tickers[1],'Mean: '), round(mean(data$GPIX) * 252 * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(data$GPIX) * sqrt(252) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(data$XDTE) * 252 * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(data$XDTE) * sqrt(252) * 100),2)
prob_error = (nrow(data[data$GPIX < 0 & data$XDTE > 0,]) +
nrow(data[data$GPIX > 0 & data$XDTE < 0,])
) / nrow(data)
cat('Probability of being offXDTEgonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$GPIX > 0 & data$XDTE < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$GPIX < 0 & data$XDTE > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$GPIX > 0 & data$XDTE > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$GPIX < 0 & data$XDTE < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
# tickers = c('TSPY','XDTE','TSPY')
tickers = c('TSPY','XDTE','TSPY')
# date = Sys.Date() - 365 #
date = Sys.Date() - (365*.98) #
# date = Sys.Date() - 183 #
# date = Sys.Date() - 88 #
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
# getSymbols('DMO3MO', src='FRED', from=date, to = Sys.Date()+1)
#rf = as.numeric(DMO3MO[nrow(DMO3MO),]) / 100
rf=0
TSPY_rets = na.omit(periodReturn(TSPY$TSPY.Adjusted, period = 'daily'))
XDTE_rets = na.omit(periodReturn(XDTE$XDTE.Adjusted, period = 'daily'))
TSPY_rets = na.omit(periodReturn(TSPY$TSPY.Adjusted, period = 'daily'))
# data = data.frame(TSPY=TSPY_rets,XDTE=XDTE_rets)
data = data.frame(TSPY=TSPY_rets,XDTE=XDTE_rets,TSPY=TSPY_rets)
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
# tickers = c('TSPY','XDTE','TSPY')
tickers = c('TSPY','XDTE','TSPY')
# date = Sys.Date() - 365 #
date = Sys.Date() - (365*.5) #
# date = Sys.Date() - 183 #
# date = Sys.Date() - 88 #
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
# getSymbols('DMO3MO', src='FRED', from=date, to = Sys.Date()+1)
#rf = as.numeric(DMO3MO[nrow(DMO3MO),]) / 100
rf=0
TSPY_rets = na.omit(periodReturn(TSPY$TSPY.Adjusted, period = 'daily'))
XDTE_rets = na.omit(periodReturn(XDTE$XDTE.Adjusted, period = 'daily'))
TSPY_rets = na.omit(periodReturn(TSPY$TSPY.Adjusted, period = 'daily'))
# data = data.frame(TSPY=TSPY_rets,XDTE=XDTE_rets)
data = data.frame(TSPY=TSPY_rets,XDTE=XDTE_rets,TSPY=TSPY_rets)
colnames(data) = c("TSPY",'XDTE')
colnames(data) = c("TSPY",'XDTE','TSPY')
data = data[order(data$XDTE),]
# data$pos_neg = data$XDTE < -.005
#data$yhat = predict(polyReg, data)
plot(data$XDTE-rf, data$TSPY-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$XDTE,data$yhat, col='red')
linTrReg <- lm(I(TSPY-rf)~I(XDTE-rf), data = data)
# data$piecewise <- ifelse (data$pos_neg, abs(data$XDTE)^1.5, data$XDTE)
# polyReg <- lm(TSPY ~XDTE * pos_neg, data = data)
polyReg <- lm(TSPY ~XDTE + TSPY, data = data)
# polyReg <- lm(TSPY ~ I(abs(XDTE)^3/2), data = data)
# polyReg <- lm(TSPY~I(XDTE^2), data = data)
#polyReg <- lm(T.Adjusted~exp(-XDTE * 16), data = data)
abline(linTrReg, col='red')
# lines(x=data$XDTE, y=predict(polyReg), col='darkred', pch=22,lwd=2)
points(x=mean(data$XDTE), y=mean(data$TSPY), col='darkred', pch=22,lwd=4)
summary(linTrReg)
#summary(polyReg)
stock_cor = cor(data$TSPY,data$XDTE)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * 252 * 100,2)) #annualized
# cat(paste(tickers[1],'Mean: '), round(mean(TSPY_rets$TSPY) * length(TSPY_rets$TSPY) * 100,2))
# cat(paste(tickers[1],'Volatiltiy:'), round(sd(TSPY_rets$TSPY) * round(sqrt(length(TSPY_rets$TSPY))) * 100,2))
# cat(paste(tickers[2],'Mean: '), round(mean(XDTE_rets$XDTE) * length(XDTE_rets$XDTE) * 100,2))
# cat(paste(tickers[2],'Volatiltiy:'), round(sd(XDTE_rets$XDTE) * round(sqrt(length(XDTE_rets$XDTE))) * 100),2)
cat(paste(tickers[1],'Mean: '), round(mean(data$TSPY) * 252 * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(data$TSPY) * sqrt(252) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(data$XDTE) * 252 * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(data$XDTE) * sqrt(252) * 100),2)
prob_error = (nrow(data[data$TSPY < 0 & data$XDTE > 0,]) +
nrow(data[data$TSPY > 0 & data$XDTE < 0,])
) / nrow(data)
cat('Probability of being offXDTEgonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$TSPY > 0 & data$XDTE < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$TSPY < 0 & data$XDTE > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$TSPY > 0 & data$XDTE > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$TSPY < 0 & data$XDTE < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
