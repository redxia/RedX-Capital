import os
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from gp.settings import namespace as settings
from gp.runner import TMP_DIR
import gp.snowflake
import datetime
import re
from utilities import util


cnx = gp.snowflake.connect()
cur = cnx.cursor()

# years = list(range(int(settings.START_DATE[0:4]), datetime.datetime.now().year + 1))
years = [2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021]
for ix, yr in enumerate(years):

    s = f"""
        select 
            aha_id,
            state, 
            beds_total_facility, 
            admissions,  
            inpatient_days, 
            total_surgical_operations, 
            supply_expense 
        from sarco.monitor_foundation.v_aha
        where community_hospital_designation = 'Community'
        and primary_service in ('General medical and surgical', 'Other specialty', 
            $$Children's general$$, $$Children's orthopedic$$, 'Surgical', 'Heart', 'Obstetrics and gynecology')
        and state like '__'
        and year = '{str(yr)}'
        """    
    print(s)
    df_aha = util.connect_snwflk(s)

    if len(df_aha) > 0:
        df_populated = df_aha 
    else:
        df_aha = df_populated

    df_aha = df_aha.replace(r'^\s*$', np.nan, regex=True)

    state = df_aha[['AHA_ID', 'STATE']]
    xy = df_aha[df_aha.columns[2:]].astype(float)

    xy_train = xy[~np.isnan(xy['SUPPLY_EXPENSE'])]
    xy_test = xy[np.isnan(xy['SUPPLY_EXPENSE'])][xy.columns[:-1]]


    x_train = xy_train.values[:, :-1]
    y_train = xy_train.values[:, -1]
    x_test = xy_test.values


    reg = LinearRegression()
    reg.fit(x_train, y_train)

    y_pred = reg.predict(x_test)

    xy_test['SUPPLY_EXPENSE'] = pd.Series(y_pred, index=xy_test.index)
    xy_test['SUPPLY_EXPENSE'][xy_test['SUPPLY_EXPENSE'] < 1000000] = 500000

    xy_fill = xy_train.append(xy_test)

    df = state.merge(xy_fill, how='left', left_index=True, right_index=True)

    df['YEAR'] = yr
    df = df[['YEAR', 'AHA_ID', 'STATE', 'SUPPLY_EXPENSE']]

    if ix == 0:
        df_out = df
    else:
        df_out = df_out.append(df, ignore_index=True)