# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('USOI','USO')
date = Sys.Date() - 365 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
USOI_rets = na.omit(USOI$USOI.Adjusted / shift(USOI$USOI.Adjusted) - 1)
USO_rets = na.omit(USO$USO.Adjusted / shift(USO$USO.Adjusted) - 1)
data = data.frame(USOI_rets$USOI.Adjusted, USO_rets$USO.Adjusted)
data = data[order(data$USO.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$USO.Adjusted-rf, data$USOI.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$USO.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(USOI.Adjusted-rf)~I(USO.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~USO.Adjusted + I(USO.Adjusted^2) + I(USO.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-USO.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(USO_rets$USO.Adjusted), y=mean(USOI_rets$USOI.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(USOI_rets$USOI.Adjusted,USO_rets$USO.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(USOI_rets$USOI.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(USOI_rets$USOI.Adjusted) * length(USOI_rets$USOI.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(USOI_rets$USOI.Adjusted) * sqrt(length(USOI_rets$USOI.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(USO_rets$USO.Adjusted) * length(USO_rets$USO.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(USO_rets$USO.Adjusted) * sqrt(length(USO_rets$USO.Adjusted)) * 100),2)
prob_error = (nrow(data[data$USOI.Adjusted < 0 & data$USO.Adjusted > 0,]) +
nrow(data[data$USOI.Adjusted > 0 & data$USO.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$USOI.Adjusted > 0 & data$USO.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$USOI.Adjusted < 0 & data$USO.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$USOI.Adjusted > 0 & data$USO.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$USOI.Adjusted < 0 & data$USO.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('USOI','USO')
date = Sys.Date() - 365*2 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
USOI_rets = na.omit(USOI$USOI.Adjusted / shift(USOI$USOI.Adjusted) - 1)
USO_rets = na.omit(USO$USO.Adjusted / shift(USO$USO.Adjusted) - 1)
data = data.frame(USOI_rets$USOI.Adjusted, USO_rets$USO.Adjusted)
data = data[order(data$USO.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$USO.Adjusted-rf, data$USOI.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$USO.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(USOI.Adjusted-rf)~I(USO.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~USO.Adjusted + I(USO.Adjusted^2) + I(USO.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-USO.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(USO_rets$USO.Adjusted), y=mean(USOI_rets$USOI.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(USOI_rets$USOI.Adjusted,USO_rets$USO.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(USOI_rets$USOI.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(USOI_rets$USOI.Adjusted) * length(USOI_rets$USOI.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(USOI_rets$USOI.Adjusted) * sqrt(length(USOI_rets$USOI.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(USO_rets$USO.Adjusted) * length(USO_rets$USO.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(USO_rets$USO.Adjusted) * sqrt(length(USO_rets$USO.Adjusted)) * 100),2)
prob_error = (nrow(data[data$USOI.Adjusted < 0 & data$USO.Adjusted > 0,]) +
nrow(data[data$USOI.Adjusted > 0 & data$USO.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$USOI.Adjusted > 0 & data$USO.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$USOI.Adjusted < 0 & data$USO.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$USOI.Adjusted > 0 & data$USO.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$USOI.Adjusted < 0 & data$USO.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
rf
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('REML','SCHH')
date = Sys.Date() - 365 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
ARKK_rets = na.omit(REML$REML.Adjusted / shift(REML$REML.Adjusted) - 1)
QQQ_rets = na.omit(SCHH$SCHH.Adjusted / shift(SCHH$SCHH.Adjusted) - 1)
data = data.frame(ARKK_rets$REML.Adjusted, QQQ_rets$SCHH.Adjusted)
data = data[order(data$SCHH.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$SCHH.Adjusted-rf, data$REML.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$SCHH.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(REML.Adjusted-rf)~I(SCHH.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~SCHH.Adjusted + I(SCHH.Adjusted^2) + I(SCHH.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-SCHH.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(QQQ_rets$SCHH.Adjusted), y=mean(ARKK_rets$REML.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(ARKK_rets$REML.Adjusted,QQQ_rets$SCHH.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(ARKK_rets$REML.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(ARKK_rets$REML.Adjusted) * length(ARKK_rets$REML.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(ARKK_rets$REML.Adjusted) * sqrt(length(ARKK_rets$REML.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(QQQ_rets$SCHH.Adjusted) * length(QQQ_rets$SCHH.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(QQQ_rets$SCHH.Adjusted) * sqrt(length(QQQ_rets$SCHH.Adjusted)) * 100),2)
prob_error = (nrow(data[data$REML.Adjusted < 0 & data$SCHH.Adjusted > 0,]) +
nrow(data[data$REML.Adjusted > 0 & data$SCHH.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$REML.Adjusted > 0 & data$SCHH.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$REML.Adjusted < 0 & data$SCHH.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$REML.Adjusted > 0 & data$SCHH.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$REML.Adjusted < 0 & data$SCHH.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
getSymbols("^FNER")
head(FNER)
tail(FNER)
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('REML','^FNER')
date = Sys.Date() - 365 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
ARKK_rets = na.omit(REML$REML.Adjusted / shift(REML$REML.Adjusted) - 1)
QQQ_rets = na.omit(^FNER$^FNER.Adjusted / shift(^FNER$^FNER.Adjusted) - 1)
data = data.frame(ARKK_rets$REML.Adjusted, QQQ_rets$^FNER.Adjusted)
data = data[order(data$^FNER.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$^FNER.Adjusted-rf, data$REML.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$^FNER.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(REML.Adjusted-rf)~I(^FNER.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~^FNER.Adjusted + I(^FNER.Adjusted^2) + I(^FNER.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-^FNER.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(QQQ_rets$^FNER.Adjusted), y=mean(ARKK_rets$REML.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(ARKK_rets$REML.Adjusted,QQQ_rets$^FNER.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(ARKK_rets$REML.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(ARKK_rets$REML.Adjusted) * length(ARKK_rets$REML.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(ARKK_rets$REML.Adjusted) * sqrt(length(ARKK_rets$REML.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(QQQ_rets$^FNER.Adjusted) * length(QQQ_rets$^FNER.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(QQQ_rets$^FNER.Adjusted) * sqrt(length(QQQ_rets$^FNER.Adjusted)) * 100),2)
prob_error = (nrow(data[data$REML.Adjusted < 0 & data$^FNER.Adjusted > 0,]) +
nrow(data[data$REML.Adjusted > 0 & data$^FNER.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$REML.Adjusted > 0 & data$^FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$REML.Adjusted < 0 & data$^FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$REML.Adjusted > 0 & data$^FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$REML.Adjusted < 0 & data$^FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('REML','^FNER')
date = Sys.Date() - 365 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
REML_rets = na.omit(REML$REML.Adjusted / shift(REML$REML.Adjusted) - 1)
FNER_rets = na.omit(FNER$FNER.Adjusted / shift(FNER$FNER.Adjusted) - 1)
data = data.frame(REML_rets$REML.Adjusted, FNER_rets$FNER.Adjusted)
data = data[order(data$FNER.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$FNER.Adjusted-rf, data$REML.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$FNER.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(REML.Adjusted-rf)~I(FNER.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~FNER.Adjusted + I(FNER.Adjusted^2) + I(FNER.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-FNER.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(FNER_rets$FNER.Adjusted), y=mean(REML_rets$REML.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(REML_rets$REML.Adjusted,FNER_rets$FNER.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(REML_rets$REML.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(REML_rets$REML.Adjusted) * length(REML_rets$REML.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(REML_rets$REML.Adjusted) * sqrt(length(REML_rets$REML.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(FNER_rets$FNER.Adjusted) * length(FNER_rets$FNER.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(FNER_rets$FNER.Adjusted) * sqrt(length(FNER_rets$FNER.Adjusted)) * 100),2)
prob_error = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted > 0,]) +
nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
tickers
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('REML','^FNER')
date = Sys.Date() - 365 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
REML_rets = na.omit(REML$REML.Adjusted / shift(REML$REML.Adjusted) - 1)
FNER_rets = na.omit(FNER$FNER.Adjusted / shift(FNER$FNER.Adjusted) - 1)
data = data.frame(REML_rets$REML.Adjusted, FNER_rets$FNER.Adjusted)
data = data[order(data$FNER.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$FNER.Adjusted-rf, data$REML.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$FNER.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(REML.Adjusted-rf)~I(FNER.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~FNER.Adjusted + I(FNER.Adjusted^2) + I(FNER.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-FNER.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(FNER_rets$FNER.Adjusted), y=mean(REML_rets$REML.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(REML_rets$REML.Adjusted,FNER_rets$FNER.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(REML_rets$REML.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(REML_rets$REML.Adjusted) * length(REML_rets$REML.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(REML_rets$REML.Adjusted) * sqrt(length(REML_rets$REML.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(FNER_rets$FNER.Adjusted) * length(FNER_rets$FNER.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(FNER_rets$FNER.Adjusted) * sqrt(length(FNER_rets$FNER.Adjusted)) * 100),2)
prob_error = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted > 0,]) +
nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
head(FNER)
plot(data$FNER.Adjusted-rf, data$REML.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('REML','^FNER')
date = Sys.Date() - 200 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
REML_rets = na.omit(REML$REML.Adjusted / shift(REML$REML.Adjusted) - 1)
FNER_rets = na.omit(FNER$FNER.Adjusted / shift(FNER$FNER.Adjusted) - 1)
data = data.frame(REML_rets$REML.Adjusted, FNER_rets$FNER.Adjusted)
data = data[order(data$FNER.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$FNER.Adjusted-rf, data$REML.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$FNER.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(REML.Adjusted-rf)~I(FNER.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~FNER.Adjusted + I(FNER.Adjusted^2) + I(FNER.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-FNER.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(FNER_rets$FNER.Adjusted), y=mean(REML_rets$REML.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(REML_rets$REML.Adjusted,FNER_rets$FNER.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(REML_rets$REML.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(REML_rets$REML.Adjusted) * length(REML_rets$REML.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(REML_rets$REML.Adjusted) * sqrt(length(REML_rets$REML.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(FNER_rets$FNER.Adjusted) * length(FNER_rets$FNER.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(FNER_rets$FNER.Adjusted) * sqrt(length(FNER_rets$FNER.Adjusted)) * 100),2)
prob_error = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted > 0,]) +
nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
lenth(REML_rets)
length(REML_rets)
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('REML','^FNER')
date = Sys.Date() - 130 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
REML_rets = na.omit(REML$REML.Adjusted / shift(REML$REML.Adjusted) - 1)
FNER_rets = na.omit(FNER$FNER.Adjusted / shift(FNER$FNER.Adjusted) - 1)
data = data.frame(REML_rets$REML.Adjusted, FNER_rets$FNER.Adjusted)
data = data[order(data$FNER.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$FNER.Adjusted-rf, data$REML.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$FNER.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(REML.Adjusted-rf)~I(FNER.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~FNER.Adjusted + I(FNER.Adjusted^2) + I(FNER.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-FNER.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(FNER_rets$FNER.Adjusted), y=mean(REML_rets$REML.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(REML_rets$REML.Adjusted,FNER_rets$FNER.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(REML_rets$REML.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(REML_rets$REML.Adjusted) * length(REML_rets$REML.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(REML_rets$REML.Adjusted) * sqrt(length(REML_rets$REML.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(FNER_rets$FNER.Adjusted) * length(FNER_rets$FNER.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(FNER_rets$FNER.Adjusted) * sqrt(length(FNER_rets$FNER.Adjusted)) * 100),2)
prob_error = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted > 0,]) +
nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
length(REML_rets)
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('REML','^FNER')
date = Sys.Date() - 260 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
REML_rets = na.omit(REML$REML.Adjusted / shift(REML$REML.Adjusted) - 1)
FNER_rets = na.omit(FNER$FNER.Adjusted / shift(FNER$FNER.Adjusted) - 1)
data = data.frame(REML_rets$REML.Adjusted, FNER_rets$FNER.Adjusted)
data = data[order(data$FNER.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$FNER.Adjusted-rf, data$REML.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$FNER.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(REML.Adjusted-rf)~I(FNER.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~FNER.Adjusted + I(FNER.Adjusted^2) + I(FNER.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-FNER.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(FNER_rets$FNER.Adjusted), y=mean(REML_rets$REML.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(REML_rets$REML.Adjusted,FNER_rets$FNER.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(REML_rets$REML.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(REML_rets$REML.Adjusted) * length(REML_rets$REML.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(REML_rets$REML.Adjusted) * sqrt(length(REML_rets$REML.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(FNER_rets$FNER.Adjusted) * length(FNER_rets$FNER.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(FNER_rets$FNER.Adjusted) * sqrt(length(FNER_rets$FNER.Adjusted)) * 100),2)
prob_error = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted > 0,]) +
nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$REML.Adjusted > 0 & data$FNER.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$REML.Adjusted < 0 & data$FNER.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
length(REML_rets)
length(FNER_rets)
View(FNER_rets)
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('REML','USRT')
date = Sys.Date() - 365 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
REML_rets = na.omit(REML$REML.Adjusted / shift(REML$REML.Adjusted) - 1)
USRT_rets = na.omit(USRT$USRT.Adjusted / shift(USRT$USRT.Adjusted) - 1)
data = data.frame(REML_rets$REML.Adjusted, USRT_rets$USRT.Adjusted)
data = data[order(data$USRT.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$USRT.Adjusted-rf, data$REML.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$USRT.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(REML.Adjusted-rf)~I(USRT.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~USRT.Adjusted + I(USRT.Adjusted^2) + I(USRT.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-USRT.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(USRT_rets$USRT.Adjusted), y=mean(REML_rets$REML.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(REML_rets$REML.Adjusted,USRT_rets$USRT.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(REML_rets$REML.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(REML_rets$REML.Adjusted) * length(REML_rets$REML.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(REML_rets$REML.Adjusted) * sqrt(length(REML_rets$REML.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(USRT_rets$USRT.Adjusted) * length(USRT_rets$USRT.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(USRT_rets$USRT.Adjusted) * sqrt(length(USRT_rets$USRT.Adjusted)) * 100),2)
prob_error = (nrow(data[data$REML.Adjusted < 0 & data$USRT.Adjusted > 0,]) +
nrow(data[data$REML.Adjusted > 0 & data$USRT.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$REML.Adjusted > 0 & data$USRT.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$REML.Adjusted < 0 & data$USRT.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$REML.Adjusted > 0 & data$USRT.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$REML.Adjusted < 0 & data$USRT.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
