)
abline(v = as.Date(index(UVXY['20170101/20180101']), "%m-%d")
[c(seq(1,nrow(UVXY['20170101/20180101']), 21),251)], col = 'blue', lty = 3)
legend('topright', inset = c(-0.35,0), legend = c("2016","2017","2018",'2019'),
col=c(1:4), lty=1, lwd = 2, xpd = TRUE)
abline(h=seq(10,85,10), lty=3, col='blue')
# 2019+
par(mar = c(4,4,4,6))
after2021 = as.numeric(UVXY['20210101/']$UVXY.Close) # use for the latest forward fill. Update
matplot(as.Date(index(UVXY['20190101/20200101']), "%m-%d"),
data.frame(UVXY['20190101/20200101']$UVXY.Close,
UVXY['20200101/20210101']$UVXY.Close[-253],
c(after2021, rep(after2021[length(after2021)],252 - length(after2021)))
),
type='l', xlab = "Dates", ylab = "UVXY", col = c(1:4), lty = 1, lwd = 2, ylim=c(0,115)
)
abline(v = as.Date(index(UVXY['20200101/20210101']), "%m-%d")
[c(seq(1,nrow(UVXY['20200101/20210101']), 21),252)], col = 'blue', lty = 3)
abline(h=seq(10,105,10), lty=3, col='blue')
legend('topright', inset = c(-0.35,0), legend = c("2019","2020","2021"),
col=c(1:3), lty=1, lwd = 2, xpd = TRUE)
min(UVXY['20170101/']$UVXY.Close)
min(UVXY['20120101/20170101']$UVXY.Close)
quantile(UVXY['20170101/']$UVXY.Close, .05)
quantile(UVXY['20170101/']$UVXY.Close, .1)
quantile(UVXY['20170101/']$UVXY.Close, .035)
getSymbols('UVXY', verbose = FALSE, from = "2011-01-01", src = 'av', output = 'full')
getSymbols('SPY', verbose = FALSE, from = "2011-01-01", src = 'av', output = 'full')
UVXY = UVXY['20111031/']
SPY = SPY['20111031/']
# getSymbols('SVXY', verbose = FALSE, from = "2011-01-01", src = 'av', output = 'full')
# getSymbols('VXX', verbose = FALSE, from = "2009-01-30", src = 'av', output = 'full')
# getSymbols('SPY', verbose = FALSE, from = "2011-01-01", src = 'av', output = 'full')
#UVXY_AV = av_get("UVXY", "TIME_SERIES_DAILY_ADJUSTED", outputsize = "full")
#VIXY = av_get("VIXY", "TIME_SERIES_DAILY_ADJUSTED", outputsize = "full")
#SVXY = av_get("SVXY", "TIME_SERIES_DAILY_ADJUSTED", outputsize = "full")
#getSymbols("^VIX", verbose = FALSE, from = "2000-01-30")
UVXY_Ret = (UVXY$UVXY.Close / shift(UVXY$UVXY.Close) - 1)[-1]
SPY_Ret = (SPY$SPY.Close / shift(SPY$SPY.Close) - 1)[-1]
# getting the data --------------------------------------------------------
# trend plots -------------------------------------------------------------
# plot(UVXY["20120101/"]$UVXY.Close/as.numeric(UVXY["20120101/"]$UVXY.Close[1]), ylim=c(0,9))
# lines(SVXY["20120101/"]$SVXY.Close/as.numeric(SVXY["20120101/"]$SVXY.Close[1]), col='red')
# lines(VXX["20120101/"]$VXX.Close/as.numeric(VXX["20120101/"]$VXX.Close[1]), col='red')
# lines(SPY["20120101/"]$SPY.Close/as.numeric(SPY["20120101/"]$SPY.Close[1]), col='red')
plot(as.numeric(SPY_Ret$SPY.Close), as.numeric(UVXY_Ret$UVXY.Close))
plot(as.numeric(SPY_Ret$SPY.Close[UVXY_Ret$UVXY.Close < 2]), as.numeric(UVXY_Ret$UVXY.Close[UVXY_Ret$UVXY.Close < 2]))
abline(h=0,v=0)
# trend plots -------------------------------------------------------------
# plotting ----------------------------------------------------------------
plot(UVXY["20120101/"]$UVXY.Close, ylim=c(0,115))
par(mar = c(4,4,4,6))
after2021 = as.numeric(UVXY['20210101/']$UVXY.Close) # use for the latest forward fill. Update
matplot(as.Date(index(UVXY['20190101/20200101']), "%m-%d"),
data.frame(UVXY['20190101/20200101']$UVXY.Close,
UVXY['20200101/20210101']$UVXY.Close[-253],
c(after2021, rep(after2021[length(after2021)],252 - length(after2021)))
),
type='l', xlab = "Dates", ylab = "UVXY", col = c(1:4), lty = 1, lwd = 2, ylim=c(0,115)
)
abline(v = as.Date(index(UVXY['20200101/20210101']), "%m-%d")
[c(seq(1,nrow(UVXY['20200101/20210101']), 21),252)], col = 'blue', lty = 3)
abline(h=seq(10,105,10), lty=3, col='blue')
legend('topright', inset = c(-0.35,0), legend = c("2019","2020","2021"),
col=c(1:3), lty=1, lwd = 2, xpd = TRUE)
View(UVXY)
library(quantmod)
library(alphavantager)
library(lubridate)
library(forecast)
library(zoo)
library(data.table)
#library(AlpacaforR)
av_api_key("TCQT2QFAN6SOOT8I")
setDefaults(getSymbols.av, api.key = "TCQT2QFAN6SOOT8I")
symbols <- "SPY"
library(quantmod)
library(forecast)
library(timeDate)
library(data.table)
library(alphavantager)
library(quantmod)
library(tseries)
#library(AlpacaforR)
av_api_key("TCQT2QFAN6SOOT8I")
setDefaults(getSymbols.av, api.key = "TCQT2QFAN6SOOT8I")
getSymbols('SPY', verbose = FALSE, from = "2011-01-01", src = 'av', output = 'full')
SPY_Ret = SPY$SPY.Close/shift(SPY$SPY.Close)-1
View(SPY_Ret)
mean(SPY_Ret,na.rm=TRUE) / sd(SPY_Ret,na.rm=TRUE)
(mean(SPY_Ret,na.rm=TRUE)*252) / (sd(SPY_Ret,na.rm=TRUE)*sqrt(252))
library(quantmod)
library(alphavantager)
library(lubridate)
library(forecast)
library(zoo)
library(data.table)
#library(AlpacaforR)
av_api_key("TCQT2QFAN6SOOT8I")
setDefaults(getSymbols.av, api.key = "TCQT2QFAN6SOOT8I")
symbols <- "SPY"
#Stock <- getSymbols(symbols, src = "av", output.size = "full", periodicity = "daily", auto.assign = FALSE)
dateMarch6 <- as.Date("2020-01-01")
#Stock <- Stock[index(Stock) >= dateMarch6,]
#SPY <- getSymbols("SPY", from = dateMarch6, auto.assign = FALSE)
#SPY <- av_get(symbols, "TIME_SERIES_DAILY_ADJUSTED", outputsize = "full")
SPY <- getSymbols("SPY", from=Sys.Date()-365, to = Sys.Date()+1, verbose = FALSE, auto.assign = FALSE)
#SPY <- SPY[SPY$timestamp >= dateMarch6,]
#Stock <- av_get(symbols, "TIME_SERIES_INTRADAY", interval = "60min", outputsize = "full")
par(mfrow=c(2,1))
SPY$Returns <- SPY$SPY.Adjusted / shift(SPY$SPY.Adjusted) - 1
SPY <- na.omit(SPY)
SPY$col <- as.factor(ifelse(SPY$Returns > 0,1,0))
SPY <- as.data.frame(SPY)
barplot(SPY$Returns, col = c("red","green")[SPY$col], main = "SP 500 Daily Moves", space = 0, axes = FALSE, ylab = "Returns")
axis(side = 2, pos = 0, at = seq(-.2,.15,.01))
abline(h = seq(-.2,.15,.01))
#box()
avgRet <- function(x){
return(prod(x + 1))
}
SPY$RollMean <- c(rep(NA,2),rollapply(SPY$Returns, width = 3, FUN = avgRet))
SPY$colRoll <- as.factor(ifelse(SPY$RollMean - 1 > 0, 1, 0))
barplot(SPY$RollMean - 1, col = c("red","green")[SPY$colRoll], main = "SP 500/3 day rolling average", space = 0, axes = FALSE, ylab = "Returns")
axis(side = 2, pos = 0, at = seq(-.2,.15,.01))
abline(h = seq(-.2,.15,.01))
# model1 <- auto.arima(SPY$RollMean-1)
# model2 <- auto.arima(SPY$Returns, max.p = 10, max.d = 5, max.D = 5, max.q = 10)
# prediction <- c((SPY$RollMean - 1),predict(model1, n.ahead = 5)$pred)
# #prediction <- c((SPY$Returns),predict(model2, n.ahead = 5)$pred)
# barplot(prediction)
#
# #Returns <- data.frame(index(Stock)[-1],(diff(Stock$DIA.Close)) / Stock$DIA.Close[-1])
# colnames(Returns) <- c("timestamp","Close")
# barplot(Returns$Close)
# plot(Returns$Close,type = 'l')
#
# mean(Returns$Close, na.rm = TRUE)
# sd(Returns$Close)
# confiINT <- c(quantile(Returns$Close, .1), quantile(Returns$Close,.9))
# # confiINT <- mean(Returns$Close) + c(1.5 * sd(Returns$Close), -1.5 * sd(Returns$Close))
# confiINT
# positiveRet <- data.frame(time = Returns$timestamp,Close = ifelse(Returns$Close > 0 , Returns$Close,0))
# negativeRet <- data.frame(time = Returns$timestamp,Close = ifelse(Returns$Close < 0 , Returns$Close , 0))
# #Returns$Adjusted.Close <- ifelse(Returns$Adjusted.Close > 0,Returns$Adjusted.Close,0)
# #positiveRet$Close > 0
# onlyPositive <- Returns$Close > 0
# PositiveGains <- Returns[onlyPositive,]
# dateDiff <- diff(PositiveGains$timestamp)
# dateDiff
# PositiveGains
# PositiveGains$Close
# PositiveGains$dateDiff <- c(0,dateDiff)
# plusMinus1D <- sort(unique(c(which(PositiveGains$Close > .02) - 1,which(PositiveGains$Close > .02),which(PositiveGains$Close > .02) +1)),decreasing = FALSE)
#
# #plusMinus1D <- sort(c(which(PositiveGains$dateDiff == 1) -1, which(PositiveGains$dateDiff == 1), which(PositiveGains$dateDiff == 1) + 1), decreasing = FALSE)
# PositiveGains[plusMinus1D,]
#
# culreturn <- function(x){
#   return(prod(x + 1))
# }
# rollAVG <- c(numeric(5),rollapply(Returns$Adjusted.Close,6,culreturn))
# Returns$rollAvg5 <- rollAVG
# plot(Returns$timestamp[-(1:5)],Returns$rollAvg5[-(1:5)],type = 'l')
# plot(Returns$timestamp,Returns$Adjusted.Close, type = 'l')
# plot(Stock$timestamp[1500:1800],Stock$adjusted_close[1500:1800], type = 'l')
library(quantmod)
library(forecast)
library(timeDate)
library(data.table)
library(quantmod)
library(tseries)
library(alphavantager)
av_api_key("TCQT2QFAN6SOOT8I")
setDefaults(getSymbols.av, api.key = "TCQT2QFAN6SOOT8I")
setwd("D:/RedX Capital/vix strat/Actual")
source('utilities.r')
plot_uvxy_vix('2012-01-01','2012-12-31',UVXY_VIX)
#plot_uvxy_vix('2012-01-01','2012-12-31',UVXY_VIX, compare=TRUE)
plot_uvxy_vix('2013-01-01','2013-12-31',UVXY_VIX)
plot_uvxy_vix('2014-01-01','2014-12-31',UVXY_VIX)
plot_uvxy_vix('2015-01-01','2015-12-31',UVXY_VIX)
plot_uvxy_vix('2016-01-01','2016-12-31',UVXY_VIX)
plot_uvxy_vix('2017-01-01','2017-12-31',UVXY_VIX)
plot_uvxy_vix('2018-01-01','2018-12-31',UVXY_VIX)
plot_uvxy_vix('2019-01-01','2019-12-31',UVXY_VIX)
plot_uvxy_vix('2020-01-01','2020-12-31',UVXY_VIX)
plot_uvxy_vix('2021-01-01','2021-12-31',UVXY_VIX)
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('INSP','QQQ')
date = Sys.Date() - 365 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
INSP_rets = na.omit(INSP$INSP.Adjusted / shift(INSP$INSP.Adjusted) - 1)
QQQ_rets = na.omit(QQQ$QQQ.Adjusted / shift(QQQ$QQQ.Adjusted) - 1)
data = data.frame(INSP_rets$INSP.Adjusted, QQQ_rets$QQQ.Adjusted)
data = data[order(data$QQQ.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$QQQ.Adjusted-rf, data$INSP.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$QQQ.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(INSP.Adjusted-rf)~I(QQQ.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~QQQ.Adjusted + I(QQQ.Adjusted^2) + I(QQQ.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-QQQ.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(QQQ_rets$QQQ.Adjusted), y=mean(INSP_rets$INSP.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(INSP_rets$INSP.Adjusted,QQQ_rets$QQQ.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(INSP_rets$INSP.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(INSP_rets$INSP.Adjusted) * length(INSP_rets$INSP.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(INSP_rets$INSP.Adjusted) * sqrt(length(INSP_rets$INSP.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(QQQ_rets$QQQ.Adjusted) * length(QQQ_rets$QQQ.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(QQQ_rets$QQQ.Adjusted) * sqrt(length(QQQ_rets$QQQ.Adjusted)) * 100),2)
prob_error = (nrow(data[data$INSP.Adjusted < 0 & data$QQQ.Adjusted > 0,]) +
nrow(data[data$INSP.Adjusted > 0 & data$QQQ.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$INSP.Adjusted > 0 & data$QQQ.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$INSP.Adjusted < 0 & data$QQQ.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$INSP.Adjusted > 0 & data$QQQ.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$INSP.Adjusted < 0 & data$QQQ.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('INSP','SPY')
date = Sys.Date() - 365 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
INSP_rets = na.omit(INSP$INSP.Adjusted / shift(INSP$INSP.Adjusted) - 1)
SPY_rets = na.omit(SPY$SPY.Adjusted / shift(SPY$SPY.Adjusted) - 1)
data = data.frame(INSP_rets$INSP.Adjusted, SPY_rets$SPY.Adjusted)
data = data[order(data$SPY.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$SPY.Adjusted-rf, data$INSP.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$SPY.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(INSP.Adjusted-rf)~I(SPY.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~SPY.Adjusted + I(SPY.Adjusted^2) + I(SPY.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-SPY.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(SPY_rets$SPY.Adjusted), y=mean(INSP_rets$INSP.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(INSP_rets$INSP.Adjusted,SPY_rets$SPY.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(INSP_rets$INSP.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(INSP_rets$INSP.Adjusted) * length(INSP_rets$INSP.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(INSP_rets$INSP.Adjusted) * sqrt(length(INSP_rets$INSP.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(SPY_rets$SPY.Adjusted) * length(SPY_rets$SPY.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(SPY_rets$SPY.Adjusted) * sqrt(length(SPY_rets$SPY.Adjusted)) * 100),2)
prob_error = (nrow(data[data$INSP.Adjusted < 0 & data$SPY.Adjusted > 0,]) +
nrow(data[data$INSP.Adjusted > 0 & data$SPY.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$INSP.Adjusted > 0 & data$SPY.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$INSP.Adjusted < 0 & data$SPY.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$INSP.Adjusted > 0 & data$SPY.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$INSP.Adjusted < 0 & data$SPY.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('NPCE','QQQ')
date = Sys.Date() - 365 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
NPCE_rets = na.omit(NPCE$NPCE.Adjusted / shift(NPCE$NPCE.Adjusted) - 1)
QQQ_rets = na.omit(QQQ$QQQ.Adjusted / shift(QQQ$QQQ.Adjusted) - 1)
data = data.frame(NPCE_rets$NPCE.Adjusted, QQQ_rets$QQQ.Adjusted)
data = data[order(data$QQQ.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$QQQ.Adjusted-rf, data$NPCE.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$QQQ.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(NPCE.Adjusted-rf)~I(QQQ.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~QQQ.Adjusted + I(QQQ.Adjusted^2) + I(QQQ.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-QQQ.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(QQQ_rets$QQQ.Adjusted), y=mean(NPCE_rets$NPCE.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(NPCE_rets$NPCE.Adjusted,QQQ_rets$QQQ.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(NPCE_rets$NPCE.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(NPCE_rets$NPCE.Adjusted) * length(NPCE_rets$NPCE.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(NPCE_rets$NPCE.Adjusted) * sqrt(length(NPCE_rets$NPCE.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(QQQ_rets$QQQ.Adjusted) * length(QQQ_rets$QQQ.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(QQQ_rets$QQQ.Adjusted) * sqrt(length(QQQ_rets$QQQ.Adjusted)) * 100),2)
prob_error = (nrow(data[data$NPCE.Adjusted < 0 & data$QQQ.Adjusted > 0,]) +
nrow(data[data$NPCE.Adjusted > 0 & data$QQQ.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$NPCE.Adjusted > 0 & data$QQQ.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$NPCE.Adjusted < 0 & data$QQQ.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$NPCE.Adjusted > 0 & data$QQQ.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$NPCE.Adjusted < 0 & data$QQQ.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# This script identify the beta, and provides a regression analysis
library(quantmod)
library(data.table)
# parameters
tickers = c('ARKK','QQQ')
date = Sys.Date() - 365 #"2020-06-09"#
getSymbols(tickers, from=date, to = Sys.Date()+1, verbose = FALSE)
getSymbols('DGS3MO', src='FRED', from=date, to = Sys.Date()+1)
rf = as.numeric(DGS3MO[nrow(DGS3MO),]) / 100
ARKK_rets = na.omit(ARKK$ARKK.Adjusted / shift(ARKK$ARKK.Adjusted) - 1)
QQQ_rets = na.omit(QQQ$QQQ.Adjusted / shift(QQQ$QQQ.Adjusted) - 1)
data = data.frame(ARKK_rets$ARKK.Adjusted, QQQ_rets$QQQ.Adjusted)
data = data[order(data$QQQ.Adjusted),]
#data$yhat = predict(polyReg, data)
plot(data$QQQ.Adjusted-rf, data$ARKK.Adjusted-rf,
xlab=paste(tickers[2],' Returns'),
ylab=paste(tickers[1],' Returns'),
main='CAPM Model')
abline(h=0,v=0, col='grey',lty='dashed')
#lines(data$QQQ.Adjusted,data$yhat, col='red')
linTrReg <- lm(I(ARKK.Adjusted-rf)~I(QQQ.Adjusted-rf), data = data)
#polyReg <- lm(T.Adjusted~QQQ.Adjusted + I(QQQ.Adjusted^2) + I(QQQ.Adjusted^3), data = data)
#polyReg <- lm(T.Adjusted~exp(-QQQ.Adjusted * 16), data = data)
abline(linTrReg, col='red')
points(x=mean(QQQ_rets$QQQ.Adjusted), y=mean(ARKK_rets$ARKK.Adjusted), col='darkred', pch=22,lwd=4)
stock_cor = cor(ARKK_rets$ARKK.Adjusted,QQQ_rets$QQQ.Adjusted)
summary(linTrReg)
#summary(polyReg)
cat(paste(tickers[1],"Correlation:", round(stock_cor,2)), '            ')
cat(paste(tickers[1],"R^2:", round(stock_cor^2,2), '                '))
cat(paste(tickers[1],'Beta Coefficient:'), round(coef(linTrReg)[2],2))
cat(paste(tickers[1],'Alpha:'), round(coef(linTrReg)[1] * length(ARKK_rets$ARKK.Adjusted) * 100,2)) #annualized
cat(paste(tickers[1],'Mean: '), round(mean(ARKK_rets$ARKK.Adjusted) * length(ARKK_rets$ARKK.Adjusted) * 100,2))
cat(paste(tickers[1],'Volatiltiy:'), round(sd(ARKK_rets$ARKK.Adjusted) * sqrt(length(ARKK_rets$ARKK.Adjusted)) * 100,2))
cat(paste(tickers[2],'Mean: '), round(mean(QQQ_rets$QQQ.Adjusted) * length(QQQ_rets$QQQ.Adjusted) * 100,2))
cat(paste(tickers[2],'Volatiltiy:'), round(sd(QQQ_rets$QQQ.Adjusted) * sqrt(length(QQQ_rets$QQQ.Adjusted)) * 100),2)
prob_error = (nrow(data[data$ARKK.Adjusted < 0 & data$QQQ.Adjusted > 0,]) +
nrow(data[data$ARKK.Adjusted > 0 & data$QQQ.Adjusted < 0,])
) / nrow(data)
cat('Probability of being off Diagonal (Historical): ', round(prob_error,4))
prob_topleft = (nrow(data[data$ARKK.Adjusted > 0 & data$QQQ.Adjusted < 0,])) / nrow(data)
cat('Probability of being top left (Historical): ', round(prob_topleft,4))
prob_botright = (nrow(data[data$ARKK.Adjusted < 0 & data$QQQ.Adjusted > 0,])) / nrow(data)
cat('Probability of being bottom right (Historical): ', round(prob_botright,4))
prob_topright = (nrow(data[data$ARKK.Adjusted > 0 & data$QQQ.Adjusted > 0,])) / nrow(data)
cat('Probability of being top right (Historical): ', round(prob_topright,4))
prob_botleft = (nrow(data[data$ARKK.Adjusted < 0 & data$QQQ.Adjusted < 0,])) / nrow(data)
cat('Probability of being bottom left (Historical): ', round(prob_botleft,4))
# Author: Redmond Xia
# Basic Optimization for option profits
#
#
#
library(quantmod)
library(alphavantager)
library(lubridate)
av_api_key("TCQT2QFAN6SOOT8I")
setDefaults(getSymbols.av, api.key = "TCQT2QFAN6SOOT8I")
# Parameters to change
budget <- 10000 #How much you want to invest
TargetPrc <- 120 # The price you expect the stock to hit
symbols <- "ARKK" # The symbol you want
Expiration <- "2021-06-11" # Date you want the option to expire at in format "YYYY-MM-DD"
daysAhead <- "2021-06-04" # How many months you expect to sell the option before expiration. Add that value to today's day to find Option
Stock = getSymbols(Symbols = symbols, from=Sys.Date() - 100, to=Sys.Date() + 1, auto.assign = FALSE)
#Stock <- av_get(symbols, "TIME_SERIES_INTRADAY", interval = "1min", outputsize = "full")
Stock_today <- as.numeric(Stock[(nrow(Stock)),6])
#Stock_today <- Stock[(nrow(Stock)-15),]
#(hour(Stock$timestamp[nrow(Stock)]) == 16)
#plot(Stock$timestamp, Stock$close, type = 'l')
# yahoo finance have option chains info delayed by 15 minutes
Option <- getOptionChain(symbols, Exp = Expiration)
rownames(Option$calls) <- 1:nrow(Option$calls)
Option$calls <- Option$calls[,-c(2,3)]
# How many months you expect to sell the option before expiration. Add that value to today's day to find Option
ATMExpectedSell <- getOptionChain(symbols, Exp = daysAhead)
ATMExpectedSell$calls$MktPrc <- (ifelse(is.na(ATMExpectedSell$calls$Bid),0,ATMExpectedSell$calls$Bid) + ATMExpectedSell$calls$Ask) / 2
# The at the money premium measurement
ATMPremium <- ATMExpectedSell$calls[which.min(abs(ATMExpectedSell$calls$Strike -
Stock_today)),'MktPrc']
Option$calls$MktPrc <- (ifelse(is.na(Option$calls$Bid),0,Option$calls$Bid) + Option$calls$Ask) / 2
Option$calls$ExpSellPrc <- pmax(TargetPrc - Option$calls$Strike,0) + ATMPremium
# This is the amount of options you're able to buy.
Option$calls$NumOption <- floor(budget / (Option$calls$MktPrc * 100)) # each contract is worth 100 shares
Option$calls$Revenue <- (Option$calls$ExpSellPrc * 100) * Option$calls$NumOption
Option$calls$IncrProfit <- c(Option$calls$Revenue[1],diff(Option$calls$Revenue))
# Greater than 0.1 due to machine error
Option$calls$BuySell <- c(NA,ifelse(diff(Option$calls$IncrProfit /
c(Option$calls$IncrProfit[1],diff(Option$calls$Strike))) > 0.1, 1,0))
#Option$calls
View(Option$calls)
Stock_today
# Author: Redmond Xia
# Basic Optimization for option profits
#
#
#
library(quantmod)
library(alphavantager)
library(lubridate)
av_api_key("TCQT2QFAN6SOOT8I")
setDefaults(getSymbols.av, api.key = "TCQT2QFAN6SOOT8I")
# Parameters to change
budget <- 6000 #How much you want to invest
TargetPrc <- 120 # The price you expect the stock to hit
symbols <- "ARKK" # The symbol you want
Expiration <- "2021-06-11" # Date you want the option to expire at in format "YYYY-MM-DD"
daysAhead <- "2021-06-04" # How many months you expect to sell the option before expiration. Add that value to today's day to find Option
Stock = getSymbols(Symbols = symbols, from=Sys.Date() - 100, to=Sys.Date() + 1, auto.assign = FALSE)
#Stock <- av_get(symbols, "TIME_SERIES_INTRADAY", interval = "1min", outputsize = "full")
Stock_today <- as.numeric(Stock[(nrow(Stock)),6])
#Stock_today <- Stock[(nrow(Stock)-15),]
#(hour(Stock$timestamp[nrow(Stock)]) == 16)
#plot(Stock$timestamp, Stock$close, type = 'l')
# yahoo finance have option chains info delayed by 15 minutes
Option <- getOptionChain(symbols, Exp = Expiration)
rownames(Option$calls) <- 1:nrow(Option$calls)
Option$calls <- Option$calls[,-c(2,3)]
# How many months you expect to sell the option before expiration. Add that value to today's day to find Option
ATMExpectedSell <- getOptionChain(symbols, Exp = daysAhead)
ATMExpectedSell$calls$MktPrc <- (ifelse(is.na(ATMExpectedSell$calls$Bid),0,ATMExpectedSell$calls$Bid) + ATMExpectedSell$calls$Ask) / 2
# The at the money premium measurement
ATMPremium <- ATMExpectedSell$calls[which.min(abs(ATMExpectedSell$calls$Strike -
Stock_today)),'MktPrc']
Option$calls$MktPrc <- (ifelse(is.na(Option$calls$Bid),0,Option$calls$Bid) + Option$calls$Ask) / 2
Option$calls$ExpSellPrc <- pmax(TargetPrc - Option$calls$Strike,0) + ATMPremium
# This is the amount of options you're able to buy.
Option$calls$NumOption <- floor(budget / (Option$calls$MktPrc * 100)) # each contract is worth 100 shares
Option$calls$Revenue <- (Option$calls$ExpSellPrc * 100) * Option$calls$NumOption
Option$calls$IncrProfit <- c(Option$calls$Revenue[1],diff(Option$calls$Revenue))
# Greater than 0.1 due to machine error
Option$calls$BuySell <- c(NA,ifelse(diff(Option$calls$IncrProfit /
c(Option$calls$IncrProfit[1],diff(Option$calls$Strike))) > 0.1, 1,0))
#Option$calls
View(Option$calls)
Stock_today
# Author: Redmond Xia
# Basic Optimization for option profits
#
#
#
library(quantmod)
library(alphavantager)
library(lubridate)
av_api_key("TCQT2QFAN6SOOT8I")
setDefaults(getSymbols.av, api.key = "TCQT2QFAN6SOOT8I")
# Parameters to change
budget <- 6000 #How much you want to invest
TargetPrc <- 128 # The price you expect the stock to hit
symbols <- "ARKK" # The symbol you want
Expiration <- "2021-06-11" # Date you want the option to expire at in format "YYYY-MM-DD"
daysAhead <- "2021-06-04" # How many months you expect to sell the option before expiration. Add that value to today's day to find Option
Stock = getSymbols(Symbols = symbols, from=Sys.Date() - 100, to=Sys.Date() + 1, auto.assign = FALSE)
#Stock <- av_get(symbols, "TIME_SERIES_INTRADAY", interval = "1min", outputsize = "full")
Stock_today <- as.numeric(Stock[(nrow(Stock)),6])
#Stock_today <- Stock[(nrow(Stock)-15),]
#(hour(Stock$timestamp[nrow(Stock)]) == 16)
#plot(Stock$timestamp, Stock$close, type = 'l')
# yahoo finance have option chains info delayed by 15 minutes
Option <- getOptionChain(symbols, Exp = Expiration)
rownames(Option$calls) <- 1:nrow(Option$calls)
Option$calls <- Option$calls[,-c(2,3)]
# How many months you expect to sell the option before expiration. Add that value to today's day to find Option
ATMExpectedSell <- getOptionChain(symbols, Exp = daysAhead)
ATMExpectedSell$calls$MktPrc <- (ifelse(is.na(ATMExpectedSell$calls$Bid),0,ATMExpectedSell$calls$Bid) + ATMExpectedSell$calls$Ask) / 2
# The at the money premium measurement
ATMPremium <- ATMExpectedSell$calls[which.min(abs(ATMExpectedSell$calls$Strike -
Stock_today)),'MktPrc']
Option$calls$MktPrc <- (ifelse(is.na(Option$calls$Bid),0,Option$calls$Bid) + Option$calls$Ask) / 2
Option$calls$ExpSellPrc <- pmax(TargetPrc - Option$calls$Strike,0) + ATMPremium
# This is the amount of options you're able to buy.
Option$calls$NumOption <- floor(budget / (Option$calls$MktPrc * 100)) # each contract is worth 100 shares
Option$calls$Revenue <- (Option$calls$ExpSellPrc * 100) * Option$calls$NumOption
Option$calls$IncrProfit <- c(Option$calls$Revenue[1],diff(Option$calls$Revenue))
# Greater than 0.1 due to machine error
Option$calls$BuySell <- c(NA,ifelse(diff(Option$calls$IncrProfit /
c(Option$calls$IncrProfit[1],diff(Option$calls$Strike))) > 0.1, 1,0))
#Option$calls
View(Option$calls)
Stock_today
